#include "timer.h"


#ifdef ENABLE_TIMER_0_INTERRUPT
volatile unsigned int TimerCount0 = 0;
#endif


/*** Function    : timerBegin
**   Parameters  : unsigned char,unsigned char -> Timer Number, Timer Value (In milliseconds),unsigned long -> Oscillator Frequency in Hz
**   Return      : None
**   Description : It will initiates the timer
**/
void timerBegin(unsigned char TimerNo,unsigned char TimerVal,unsigned long oscFreq)
{
int reloadVal = 0;
// Set Timer Mode
TMOD |= 0x01;

reloadVal = _timer_0_1_mode_2_calc(TimerVal,oscFreq);
TL0 = reloadVal >> 8;
TH0 = reloadVal;
}

/*** Function    : timerStart
**   Parameters  : unsigned char,unsigned char -> Timer Number, Interrupts (0-> Disabled,1->Enabled)
**   Return      : None
**   Description : It will Start The Timer
**/
void timerStart(unsigned char TimerNo,unsigned char _inter)
{
if(TimerNo == TIMER0)
{
if(_inter == 1)
{
IE_1 = 1;
EA   = 1
}
TR0 = 1;
}
else if(TimerNo == TIMER1)
{
if(_inter == 1)
{
IE_3 = 1;
EA   = 1
}
TR1 = 1;
}
}

/*** Function    : timerStop
**   Parameters  : unsigned char (Timer Number)
**   Return      : None
**   Description : It will Stop The Timer
**/
void timerStop(unsigned char TimerNo)
{
if(TimerNo == TIMER0)
{
TR0  = 0;
IE_1 = 0; 
}
else if(TimerNo == TIMER1)
{
TR1  = 0;
IE_3 = 0; 
}
}


/*** Function    : N/A (It's an ISR)
**   Parameters  : None
**   Return      : None
**   Description : This is ISR for TIMER - 0 of 8051
**/
#ifdef ENABLE_TIMER_0_INTERRUPT
void timer0ISR(void) interrupt(1)
{
TimerCount0++;
TF0 = 0;
}
#endif

/*** Function    : timerClear0
**   Parameters  : None
**   Return      : None
**   Description : This function clears the count of TIMER - 0
**/
void timerClear0(void)
{
TimerCount0 = 0;
}

#endif